# -*- coding: utf-8 -*-
import scrapy
from czScrapy.items import czScrapyItem
import logging
import time
import uuid
import json
from scrapy import cmdline
from czScrapy.mail_utils import *
from scrapy.selector import Selector
from urllib.parse import urlencode, urlparse, parse_qs


class AppCxSpider(scrapy.Spider):
    name = 'app_cx'
    allowed_domains = ['cxztb.gov.cn']
    start_urls = ['http://www.cxztb.gov.cn/cxweb/ggzy/012002/012002007/012002007001/MoreInfo.aspx?CategoryNum=012002007001','http://www.cxztb.gov.cn/cxweb/ggzy/012002/012002007/012002007002/MoreInfo.aspx?CategoryNum=012002007002','http://www.cxztb.gov.cn/cxweb/ggzy/012002/012002007/012002007003/MoreInfo.aspx?CategoryNum=012002007003','http://www.cxztb.gov.cn/cxweb/ggzy/012002/012002007/012002007004/MoreInfo.aspx?CategoryNum=012002007004']
    nowpage_7001 = 1
    nowpage_7002 = 1
    nowpage_7003 = 1
    nowpage_7004 = 1
    base_url = 'http://www.cxztb.gov.cn'
    #totlepage = 1
    page_now = 0
    newEndcode = "utf-8"
    newday = ""
    typename =''
    curr_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    logging.info("----开始爬取湖州德清县网站-------")
    def start_requests(self):
        headers = {
            'Cookie': 'ASP.NET_SessionId=i333enz5lzkmhe45lud2x345'
        }
        #logging.info("现在爬取第{}页内容".format("1")
        for url in self.start_urls :
            if "012002007001" in url :
                self.page_now = self.nowpage_7001
            elif "012002007002" in url :
                self.page_now = self.nowpage_7002
            elif "012002007003" in url:
                self.page_now = self.nowpage_7003
            elif "012002007004" in url:
                self.page_now = self.nowpage_7004
            yield scrapy.FormRequest(
                url=url,
                headers=headers,
                formdata={
                # 'infotypeId': '0',  # 这里不能给bool类型的True，requests模块中可以
                '__VIEWSTATE': '',
                # 这里不能给int类型的1，requests模块中可以
                '__VIEWSTATEGENERATOR': '16AA444B',
                '__EVENTTARGET': 'MoreInfoList1$Pager',
                '__EVENTARGUMENT': str(self.page_now),
                '__VIEWSTATEENCRYPTED': ''
                },
                callback=self.parse
            )

    def parse(self, response):
        # print(response.text)
        node_list = response.xpath("//table[@id='MoreInfoList1_DataGrid1']//tr")
        # print(response.xpath("//table[@class='tb_title']/*/tr/td[2]/a[last()]/text()"))
        #print(node_list)
        nowitem = 0
        for node in node_list:
            item = czScrapyItem()
            href = str(node.xpath("./td[2]/a/@href").extract()[0].encode("utf-8"), 'utf-8')
            # print(href)
            # print(href.split('_'))
            item["id"] = href.split('&')[0].split("=")[1]

                # continue

            item["districtName"] = "长兴县"

            item["noticePubDate"] = str(node.xpath("./td[3]/text()").extract()[0].encode(self.newEndcode), 'utf-8').strip()
            item["source"] = "湖州长兴县人民政府门户网站"
            item["title"] = str(node.xpath("./td[2]/a/@title").extract()[0].encode(self.newEndcode), 'utf-8')
            if "012002007001" in response.url :
                item["typeName"] = "交易公告"
            elif "012002007002" in response.url :
                item["typeName"] = "成交公示"
            elif "012002007003" in response.url :
                item["typeName"] = "部门交易"
            elif "012002007004" in response.url :
                item["typeName"] = "乡镇交易"
            self.typename = item["typeName"]
            item["url"] = self.base_url+href
            self.newday = item["noticePubDate"]

            if self.page_now == 1 and nowitem == 0:
                logging.info("发送email-------")
                send_email(receiver=['16396355@qq.com', '8206741@163.com'],
                           # send_email(receiver=['8206741@163.com'],
                           title=self.curr_time + '湖州长兴县招标网站',
                           cont='<h1>今日爬取地址{}\r\n<br>湖州长兴县招标网站最新更新日期是{}</h1>'.format(response.url + "\r\n",
                                                                                     self.newday))
            nowitem += 1
            # print(item)
            yield scrapy.Request(self.base_url+href, meta={'item': item}, callback=self.newparse)
        if (response.xpath("//img[@src='/cxweb/images/page/nextn.gif']/../@href")):

            if "012002007001" in response.url :
                self.nowpage_7001 = self.nowpage_7001+1
                self.page_now =self.nowpage_7001
            elif "012002007002" in response.url :
                self.nowpage_7002 = self.nowpage_7002+1
                self.page_now = self.nowpage_7002
            elif "012002007003" in response.url :
                self.nowpage_7003 = self.nowpage_7003+1
                self.page_now = self.nowpage_7002
            elif "012002007004" in response.url :
                self.nowpage_7004 = self.nowpage_7004+1
                self.page_now = self.nowpage_7002
            headers = {
                'Cookie': 'ASP.NET_SessionId=i333enz5lzkmhe45lud2x345'
            }
            print(response.url)
            yield scrapy.FormRequest(
                url=response.url,
                headers=headers,
                formdata={
                    # 'infotypeId': '0',  # 这里不能给bool类型的True，requests模块中可以
                    '__VIEWSTATE': '',
                    # 这里不能给int类型的1，requests模块中可以
                    '__VIEWSTATEGENERATOR': '16AA444B',
                    '__EVENTTARGET': 'MoreInfoList1$Pager',
                    '__EVENTARGUMENT': str(self.page_now),
                    '__VIEWSTATEENCRYPTED': ''
                },  # 这里的formdata相当于requ模块中的data，key和value只能是键值对形式
                callback=self.parse
            )

            logging.info(self.typename+"现在爬取第{}页内容".format(self.page_now))


    def newparse(self, response):
        # print(response.text)
        # 接收上级已爬取的数据
        item = response.meta['item']
        item["noticeContent_html"] = str(
            ''.join(response.xpath("//td[@id='TDContent']//*").extract()).encode(self.newEndcode), 'utf-8')
        item["noticeContent"] = str(
            ''.join(response.xpath("//td[@id='TDContent']//*/text()").extract()).encode(self.newEndcode),
            'utf-8').strip()
        item["keywords"] = str(
            ''.join(response.xpath("//td[@id='TDContent']//*/text()").extract()).encode(self.newEndcode),
            'utf-8').strip()[:100]
        item["noticeTitle"] = str(
            ''.join(response.xpath("//td[@id='tdTitle']/font/b/text()").extract()).strip().encode(self.newEndcode), 'utf-8').strip()
        # print(item)
        yield item
if __name__ == "__main__":
    cmdline.execute("scrapy crawl app_cx".split())